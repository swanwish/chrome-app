window.onload = function () {    chrome.syncFileSystem.requestFileSystem(        function (fs) {            if (chrome.runtime.lastError)                showMessage(chrome.runtime.lastError.message);            else                haveFileSystem(fs);        });    setupAutoSave();    setupFileStatusChangedEvent();};function errorHandler(e) {    console.dir(e);    var msg;    if (e.target && e.target.error)        e = e.target.error;    if (e.message)        msg = e.message;    else if (e.name)        msg = e.name;    else if (e.code)        msg = "Code " + e.code;    else        msg = e.toString();    showMessage('Error: ' + msg);}var timeoutID;function showMessage(msg, good) {    console.log(msg);    var messageElement = document.querySelector("#message");    messageElement.style.color = good ? "green" : "red";    messageElement.innerHTML = msg;    if (timeoutID)        clearTimeout(timeoutID);    timeoutID = setTimeout(        function () {            messageElement.innerHTML = "&nbsp;";        },        5000);    showFileStatus();}var directoryEntry;function haveFileSystem(fs) {    fs.root.getDirectory("Note",        {            create: true,            exclusive: false        },        function (de) {            directoryEntry = de;            read();        },        errorHandler    );}var fileEntry;var fileWriter;function getFileEntry(create, callback) {    if (fileWriter)        callback();    else if (directoryEntry) {        directoryEntry.getFile('note.txt',            {                create: create,                exclusive: false            },            function (fe) {                fileEntry = fe;                fileEntry.createWriter(                    function (fw) {                        fileWriter = fw;                        callback();                    },                    errorHandler                );            },            function (e) {                if (e.name === 'NotFoundError')                    callback();                else                    errorHandler(e);            });    }}function save() {    getFileEntry(true,        function () {            fileWriter.onwrite = function (e) {                fileWriter.onwrite = function (e) {                    dirty = false;                    showMessage("Saved", true);                };                var blob = new Blob([document.querySelector("#textarea").value],                    {type: 'text/plain'});                fileWriter.write(blob);            };            fileWriter.onerror = errorHandler;            fileWriter.truncate(0);        }    );}function read() {    showFileStatus();    getFileEntry(false,        function () {            if (fileEntry)                fileEntry.file(haveFile, errorHandler);        });}function haveFile(file) {    var reader = new FileReader();    reader.onload = function () {        document.querySelector("#textarea").value = reader.result;    };    reader.readAsText(file);}var dirty = false;function setupAutoSave() {    var taElement = document.querySelector("#textarea");    taElement.addEventListener("keypress", didChange);    taElement.addEventListener("paste", didChange);    taElement.addEventListener("cut", didChange);    taElement.addEventListener("change", didChange);    taElement.addEventListener("keydown", didChange);    chrome.idle.setDetectionInterval(15);    chrome.idle.onStateChanged.addListener(        function (state) {            if (state === "idle" && dirty)                save();        }    );}function didChange(e) {    if (e.type !== 'keydown' ||        e.keyCode === 8 || e.keyCode === 46) // backspace or delete        dirty = true;}function showFileStatus(status) {    var statusElement = document.querySelector("#status");    if (status)        statusElement.innerHTML = status;    else        getFileEntry(false,            function () {                if (fileEntry)                    chrome.syncFileSystem.getFileStatus(fileEntry,                        function (status) {                            statusElement.innerHTML = status;                        });                else                    statusElement.innerHTML = "no local copy";            });}function setupFileStatusChangedEvent() {    chrome.syncFileSystem.onFileStatusChanged.addListener(        function (detail) {            if (detail.fileEntry.name === "note.txt") {                showMessage(detail.fileEntry.name + " &bull; " +                    detail.direction + " &bull; " + detail.action +                    " &bull; " + detail.status, true);                if (detail.direction === 'remote_to_local' &&                    detail.status === 'synced')                    read();                showFileStatus(detail.status);            }        });}